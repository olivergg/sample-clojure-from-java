(ns com.olivergg.query.common)

(prn "loading common namespace")

;; not used yet
(defmacro fmt
  "String interpolation macro (using `#{}` as a place holder)"
  [^String string]
  (let [-re #"#\{(.*?)\}"
        fstr (clojure.string/replace string -re "%s")
        fargs (map #(read-string (second %)) (re-seq -re string))]
    `(format ~fstr ~@fargs)))


;; not used yet, this was an atempt to parse IFF ENDIFF condition embedded inside string.
;; for example (transform "begin IFF(true) insideiff ENDIFF end") => "begin insideiff end"
(defn transform
   "Transform the given input string into a valid SQL query by removing IFF ENDIFF clauses"
   [input]
   (loop [[head & remain] (clojure.string/split input #"[ \n\t]")
          stack (list)
          output (transient [])]
       (cond
         (nil? head)  (as-> output _
                        (persistent! _)
                        (interpose  " " _)
                        (reduce str _)
                        (clojure.string/replace _ #"(?s)\/\*([^\*]+)\*\/" "")
                        (clojure.string/replace _ #"\n" " "))
         :else (let [[_ iffcondition] (re-matches #"IFF\((.*)\)" head)
                     [_ endiff] (re-matches #"(ENDIFF)" head)
                     evalcondition (when iffcondition (eval (read-string iffcondition)))]
                 (cond
                   iffcondition (recur remain (conj stack (or evalcondition false) ) output)

                   endiff (recur remain (rest stack) output)

                   (or (empty? stack)
                       (reduce #(and %1 %2) stack))
                   (recur remain stack (conj! output head))

                   :else (recur remain stack output))))))


;; create a function that compose several transformations of an input collection of strings
;; remove line break, SQL comments
(def sql (comp #(clojure.string/replace % #"(?s)\/\*([^\*]+)\*\/" "")
               #(clojure.string/replace % #"\s" " ")
               str))


(defmacro defquery 
  "A simple macro to declare a String as a SQL query, hidding the call to the sql function"
  [queryname [& args] & strings]
  `(defn ~queryname [~@args] (sql ~@strings))
  )
